
% Benchmarks %

@InProceedings{McDermott:2012:GECCO,
  author =	"James McDermott and David R. White and Sean Luke and
		 Luca Manzoni and Mauro Castelli and Leonardo Vanneschi
		 and Wojciech Jaskowski and Krzysztof Krawiec and Robin
		 Harper and Kenneth {De Jong} and Una-May O'Reilly",
  title =	"Genetic programming needs better benchmarks",
  booktitle =	"GECCO '12: Proceedings of the fourteenth international
		 conference on Genetic and evolutionary computation
		 conference",
  year = 	"2012",
  isbn13 =	"978-1-4503-1177-9",
  pages =	"791--798",
  keywords =	"genetic algorithms, genetic programming",
  month =	"7-11 " # jul,
  organisation = "SIGEVO",
  address =	"Philadelphia, Pennsylvania, USA",
  doi =  	"doi:10.1145/2330163.2330273",
  publisher =	"ACM",
  publisher_address = "New York, NY, USA",
  abstract =	"Genetic programming (GP) is not a field noted for the
		 rigor of its benchmarking. Some of its benchmark
		 problems are popular purely through historical
		 contingency, and they can be criticized as too easy or
		 as providing misleading information concerning
		 real-world performance, but they persist largely
		 because of inertia and the lack of good alternatives.
		 Even where the problems themselves are impeccable,
		 comparisons between studies are made more difficult by
		 the lack of standardization. We argue that the
		 definition of standard benchmarks is an essential step
		 in the maturation of the field. We make several
		 contributions towards this goal. We motivate the
		 development of a benchmark suite and define its goals;
		 we survey existing practice; we enumerate many
		 candidate benchmarks; we report progress on reference
		 implementations; and we set out a concrete plan for
		 gathering feedback from the GP community that would, if
		 adopted, lead to a standard set of benchmarks.",
  notes =	"Also known as \cite{2330273} GECCO-2012 A joint
		 meeting of the twenty first international conference on
		 genetic algorithms (ICGA-2012) and the seventeenth
		 annual genetic programming conference (GP-2012)",
  doi-url =	"http://dx.doi.org/10.1145/2330163.2330273",
}

@article{White:2013:BGB:2441218.2441242,
 author = {White, David R. and Mcdermott, James and Castelli, Mauro and Manzoni, Luca and Goldman, Brian W. and Kronberger, Gabriel and Ja\'{s}kowski, Wojciech and O'Reilly, Una-May and Luke, Sean},
 title = {Better {GP} benchmarks: community survey results and proposals},
 journal = {Genetic Programming and Evolvable Machines},
 issue_date = {March     2013},
 volume = {14},
 number = {1},
 month = mar,
 year = {2013},
 issn = {1389-2576},
 pages = {3--29},
 numpages = {27},
 url = {http://dx.doi.org/10.1007/s10710-012-9177-2},
 doi = {10.1007/s10710-012-9177-2},
 acmid = {2441242},
 publisher = {Kluwer Academic Publishers},
 address = {Hingham, MA, USA},
 keywords = {Benchmarks, Community survey, Genetic programming},
}

@InProceedings{Woodward:2014:GECCOcomp,
  author =	"John Woodward and Simon Martin and Jerry Swan",
  title =	"Benchmarks that matter for genetic programming",
  booktitle =	"GECCO 2014 4th workshop on evolutionary computation
		 for the automated design of algorithms",
  year = 	"2014",
  NOeditor =	"John Woodward and Jerry Swan and Earl Barr",
  isbn13 =	"978-1-4503-2881-4",
  keywords =	"genetic algorithms, genetic programming",
  pages =	"1397--1404",
  month =	"12-16 " # jul,
  organisation = "SIGEVO",
  address =	"Vancouver, BC, Canada",
  URL =  	"http://doi.acm.org/10.1145/2598394.2609875",
  doi =  	"doi:10.1145/2598394.2609875",
  publisher =	"ACM",
  publisher_address = "New York, NY, USA",
  abstract =	"There have been several papers published relating to
		 the practice of benchmarking in machine learning and
		 Genetic Programming (GP) in particular. In addition, GP
		 has been accused of targeting over-simplified 'toy'
		 problems that do not reflect the complexity of
		 real-world applications that GP is ultimately intended.
		 There are also theoretical results that relate the
		 performance of an algorithm with a probability
		 distribution over problem instances, and so the current
		 debate concerning benchmarks spans from the theoretical
		 to the empirical. The aim of this article is to
		 consolidate an emerging theme arising from these papers
		 and suggest that benchmarks should not be arbitrarily
		 selected but should instead be drawn from an underlying
		 probability distribution that reflects the problem
		 instances which the algorithm is likely to be applied
		 to in the real-world. These probability distributions
		 are effectively dictated by the application domains
		 themselves (essentially data-driven) and should thus
		 re-engage the owners of the originating data. A
		 consequence of properly-founded benchmarking leads to
		 the suggestion of meta-learning as a methodology for
		 automatically designing algorithms rather than manually
		 designing algorithms. A secondary motive is to reduce
		 the number of research papers that propose new
		 algorithms but do not state in advance what their
		 purpose is (i.e. in what context should they be
		 applied). To put the current practice of GP
		 benchmarking in a particular harsh light, one might ask
		 what the performance of an algorithm on Koza's
		 lawnmower problem (a favourite toy-problem of the GP
		 community) has to say about its performance on a very
		 real-world cancer data set: the two are completely
		 unrelated.",
  notes =	"Also known as \cite{2609875} Distributed at
		 GECCO-2014.",
  doi-url =	"http://dx.doi.org/10.1145/2598394.2609875",
}

% PushGP %

@TechReport{helmuth:umass:tr,
  author =	"{Omitted for blind review}",
  title =	"Detailed Problem Descriptions for General Program Synthesis Benchmark Suite",
  NOinstitution =  "omitted",
  NOyear = 	"2015",
  NOtype = 	"Research Note",
  NOnumber =	"omitted",
  NOaddress =	"omitted",
  NOmonth =	"19 " # sep,
  NOkeywords =	"omitted",
  NOURL =  	"omitted",
  NOsize = 	"omitted",
}

@InProceedings{spector2:2001:gecco,
  title =        "Autoconstructive Evolution: Push, Push{GP}, and
                 Pushpop",
  author =       "Lee Spector",
  pages =        "137--146",
  year =         "2001",
  publisher =    "Morgan Kaufmann",
  booktitle =    "Proceedings of the Genetic and Evolutionary
                 Computation Conference (GECCO-2001)",
  address =      "San Francisco, California, USA",
  publisher_address = "San Francisco, CA 94104, USA",
  month =        "7-11 " # jul,
  keywords =     "genetic algorithms, genetic programming,
                 self-replication, stack-based genetic programming,
                 ontogenetic programming, adaptive evolutionary
                 computation, recursion, modularity",
  ISBN =         "1-55860-774-9",
  URL =          "http://hampshire.edu/lspector/pubs/ace.pdf",
  URL =          "http://citeseer.ist.psu.edu/445431.html",
  URL =          "http://www.cs.bham.ac.uk/~wbl/biblio/gecco2001/d01.pdf",
  abstract =     "This paper is a preliminary report on autoconstructive
                 evolution, a framework for evolutionary computation in
                 which the machinery of reproduction and diversification
                 (and thereby the machinery of evolution) evolves within
                 the individuals of an evolving population of problem
                 solvers. Autoconstructive evolution is illustrated with
                 Pushpop, an evolving population of programs expressed
                 in the Push programming language. The Push programming
                 language can also be used in a more traditional genetic
                 programming framework and may have unique benefits when
                 so employed; the PushGP system, which uses traditional
                 genetic programming techniques to evolve Push programs,
                 is also described.",
  notes =        "GECCO-2001 A joint meeting of the tenth International
                 Conference on Genetic Algorithms (ICGA-2001) and the
                 sixth Annual Genetic Programming Conference (GP-2001)
                 Part of \cite{spector:2001:GECCO}

                 Slides at the 2001 Genetic and Evolutionary Computation
                 Conference (GECCO-2001).
                 http://hampshire.edu/lspector/ACE-GECCO.pdf",
}

@Article{spector:2002:GPEM,
  author =       "Lee Spector and Alan Robinson",
  title =        "Genetic Programming and Autoconstructive Evolution
                 with the Push Programming Language",
  journal =      "Genetic Programming and Evolvable Machines",
  year =         "2002",
  volume =       "3",
  number =       "1",
  pages =        "7--40",
  month =        mar,
  keywords =     "genetic algorithms, genetic programming, artificial
                 life, modularity, programming languages,
                 self-adaptation",
  ISSN =         "1389-2576",
  URL =          "http://hampshire.edu/lspector/pubs/push-gpem-final.pdf",
  doi =          "doi:10.1023/A:1014538503543",
  abstract =     "Push is a programming language designed for the
                 expression of evolving programs within an evolutionary
                 computation system. This article describes Push and
                 illustrates some of the opportunities that it presents
                 for evolutionary computation. Two evolutionary
                 computation systems, PushGP and Pushpop, are described
                 in detail. PushGP is a genetic programming system that
                 evolves Push programs to solve computational problems.
                 Pushpop, an ?autoconstructive evolution? system, also
                 evolves Push programs but does so while simultaneously
                 evolving its own evolutionary mechanisms.",
  notes =        "Article ID: 395988",
}

@InProceedings{1068292,
  author =       "Lee Spector and Jon Klein and Maarten Keijzer",
  title =        "The Push3 execution stack and the evolution of
                 control",
  booktitle =    "{GECCO 2005}: Proceedings of the 2005 conference on
                 Genetic and evolutionary computation",
  year =         "2005",
  ISBN =         "1-59593-010-8",
  pages =        "1689--1696",
  address =      "Washington DC, USA",
  URL =          "http://www.cs.bham.ac.uk/~wbl/biblio/gecco2005/docs/p1689.pdf",
  doi =          "doi:10.1145/1068009.1068292",
  publisher =    "ACM Press",
  publisher_address = "New York, NY, 10286-1405, USA",
  organisation = "ACM SIGEVO (formerly ISGEC)",
  keywords =     "genetic algorithms, genetic programming, combinators,
                 experimentation, exponentiation, factorial, Fibonacci
                 sequence, iteration, languages, parity, push,
                 recursion, reversing a list, sorting, stack-based
                 genetic programming",
  abstract =     "One of Push's attractive features in this context is
                 its transparent support for the expression and
                 evolution of modular architectures and complex control
                 structures, achieved through explicit code
                 self-manipulation. The latest version of Push, Push3,
                 enhances this feature by permitting explicit
                 manipulation of an execution stack that contains the
                 expressions that are queued for execution in the
                 interpreter. presents a series of examples in which
                 Push3 was used with a simple genetic programming system
                 (PushGP) to evolve programs with non-trivial control
                 structures.",
  notes =        "GECCO-2005 A joint meeting of the fourteenth
                 international conference on genetic algorithms
                 (ICGA-2005) and the tenth annual genetic programming
                 conference (GP-2005).

                 ACM Order Number 910052

                 Cited by \cite{eurogp06:AgapitosLucas}

                 EXEC stack. Combinators. Reentrant p1691 'the
                 re-entrant interpreter allows for the controlled
                 execution of a particular number of instructions per
                 time-step.' Reversing a list. Factorial. Fibonacci.
                 Parity. Powers of two, integer exponentiation
                 Expt(2,n). Sorting a list.",
}

@InProceedings{Spector:2011:GECCO,
  author =	"Lee Spector and Brian Martin and Kyle Harrington and
		 Thomas Helmuth",
  title =	"Tag-based modules in genetic programming",
  booktitle =	"GECCO '11: Proceedings of the 13th annual conference
		 on Genetic and evolutionary computation",
  year = 	"2011",
  isbn13 =	"978-1-4503-0557-0",
  pages =	"1419--1426",
  keywords =	"genetic algorithms, genetic programming, pushGP,
		 lawnmower",
  month =	"12-16 " # jul,
  organisation = "SIGEVO",
  address =	"Dublin, Ireland",
  doi =  	"doi:10.1145/2001576.2001767",
  publisher =	"ACM",
  publisher_address = "New York, NY, USA",
  abstract =	"In this paper we present a new technique for evolving
		 modular programs with genetic programming. The
		 technique is based on the use of tags that evolving
		 programs may use to label and later to refer to code
		 fragments. Tags may refer inexactly, permitting the
		 labelling and use of code fragments to co-evolve in an
		 incremental way. The technique can be implemented as a
		 minor modification to an existing, general purpose
		 genetic programming system, and it does not require
		 pre-specification of the module architecture of evolved
		 programs. We demonstrate that tag-based modules readily
		 evolve and that this allows problem solving effort to
		 scale well with problem size. We also show that the
		 tag-based module technique is effective even in
		 complex, non-uniform problem environments for which
		 previous techniques perform poorly. We demonstrate the
		 technique in the context of the stack-based genetic
		 programming system PushGP, but we also briefly discuss
		 ways in which it may be used with other kinds of
		 genetic programming systems.",
  notes =	"Section 7: tags in other forms of GP Tag data to be
		 tried. Also known as \cite{2001767} GECCO-2011 A joint
		 meeting of the twentieth international conference on
		 genetic algorithms (ICGA-2011) and the sixteenth annual
		 genetic programming conference (GP-2011)",
  doi-url =	"http://dx.doi.org/10.1145/2001576.2001767",
}

@InProceedings{Spector:2014:GECCOcomp,
  author =	"Lee Spector and Thomas Helmuth",
  title =	"Effective simplification of evolved push programs
		 using a simple, stochastic hill-climber",
  booktitle =	"GECCO Companion '14",
  year = 	"2014",
  NOeditor =	"Christian Igel and Dirk V. Arnold and Christian Gagne
		 and Elena Popovici and Anne Auger and Jaume Bacardit
		 and Dimo Brockhoff and Stefano Cagnoni and Kalyanmoy
		 Deb and Benjamin Doerr and James Foster and Tobias
		 Glasmachers and Emma Hart and Malcolm I. Heywood and
		 Hitoshi Iba and Christian Jacob and Thomas Jansen and
		 Yaochu Jin and Marouane Kessentini and Joshua D.
		 Knowles and William B. Langdon and Pedro Larranaga and
		 Sean Luke and Gabriel Luque and John A. W. McCall and
		 Marco A. {Montes de Oca} and Alison Motsinger-Reif and
		 Yew Soon Ong and Michael Palmer and Konstantinos E.
		 Parsopoulos and Guenther Raidl and Sebastian Risi and
		 Guenther Ruhe and Tom Schaul and Thomas Schmickl and
		 Bernhard Sendhoff and Kenneth O. Stanley and Thomas
		 Stuetzle and Dirk Thierens and Julian Togelius and
		 Carsten Witt and Christine Zarges",
  isbn13 =	"978-1-4503-2881-4",
  keywords =	"genetic algorithms, genetic programming: Poster",
  pages =	"147--148",
  month =	"12-16 " # jul,
  organisation = "SIGEVO",
  address =	"Vancouver, BC, Canada",
  URL =  	"http://doi.acm.org/10.1145/2598394.2598414",
  doi =  	"doi:10.1145/2598394.2598414",
  publisher =	"ACM",
  publisher_address = "New York, NY, USA",
  abstract =	"Genetic programming systems often produce programs
		 that include unnecessary code. This is undesirable for
		 several reasons, including the burdens that
		 overly-large programs put on end-users for program
		 interpretation and maintenance. The problem is
		 exacerbated by recently developed techniques, such as
		 genetic programming with geometric semantic crossover,
		 that tend to produce enormous programs. Methods for
		 automatically simplifying evolved programs are
		 therefore of interest, but automatic simplification is
		 non-trivial in the context of traditional program
		 representations with unconstrained function sets. Here
		 we show how evolved programs expressed in the
		 stack-based Push programming language can be
		 automatically and reliably simplified using a simple,
		 stochastic hill-climber. We demonstrate and
		 quantitatively characterise this simplification process
		 on programs evolved to solve four non-trivial genetic
		 programming problems with qualitatively different
		 function sets.",
  notes =	"Also known as \cite{2598414} Distributed at
		 GECCO-2014.",
  doi-url =	"http://dx.doi.org/10.1145/2598394.2598414",
}

% GP %

@Book{koza:book,
  author =	"John R. Koza",
  title =	"Genetic Programming: On the Programming of Computers
		 by Means of Natural Selection",
  year = 	"1992",
  publisher =	"MIT Press",
  address =	"Cambridge, MA, USA",
  keywords =	"genetic algorithms, genetic programming, text book",
  ISBN = 	"0-262-11170-5",
}

% Repair $

@Article{ManyBugsAndIntroClass,
title = "The {ManyBugs} and {IntroClass} Benchmarks for Automated Program Repair",
author = "Claire Le Goues and Neal Holtschulte and Edward K. Smith and Yuriy Brun and Premkumar Devanbu and Stephanie Forrest and Westley Weimer",
journal = "IEEE Transactions on Software Engineering",
note = "Under Review",
}


@techreport{Brun13TRgptest,
  author = {Yuriy Brun and Earl Barr and Ming Xiao and Claire {Le Goues} and Prem Devanbu},
  title =  {Evolution vs.\ Intelligent Design in Program Patching},
  year =   {2013},
  institution = {UC Davis: College of Engineering},
  venue = {Tech. Report},
  number = {\url{https://escholarship.org/uc/item/3z8926ks}},
}


% iJava %

@misc{iJava,
   author = "Robert Moll",
   title = "{iJava}",
   year = "2014",
   howpublished = "\url{http://ijava.cs.umass.edu/index.html}",
   note = "Edition 3.1. Online; accessed September 2015"
}

@article{Moll:2011:IOI:1968521.1968535,
author = {Moll, Robert},
title = {{iJava}---an Online Interactive Textbook for Elementary {Java} Instruction: Demonstration},
journal = {Journal of Computing Sciences in Colleges},
issue_date = {June 2011},
volume = {26},
number = {6},
month = jun,
year = {2011},
issn = {1937-4771},
pages = {55--57},
numpages = {3},
url = {http://dl.acm.org/citation.cfm?id=1968521.1968535},
acmid = {1968535},
publisher = {Consortium for Computing Sciences in Colleges},
address = {USA},
}

% Lexicase %

@Article{Helmuth:2014:ieeeTEC,
  author = {Thomas Helmuth and Lee Spector and James Matheson},
  title = {Solving Uncompromising Problems with Lexicase Selection}, 
  journal =	"IEEE Transactions on Evolutionary Computation",
  year = 	"2014",
}

@inproceedings{Spector:2012:APM:2330784.2330846,
 author = {Spector, Lee},
 title = {Assessment of problem modality by differential performance of lexicase selection in genetic programming: a preliminary report},
 booktitle = {Proceedings of the fourteenth international conference on Genetic and evolutionary computation conference companion},
 series = {GECCO Companion '12},
 year = {2012},
 isbn = {978-1-4503-1178-6},
 location = {Philadelphia, Pennsylvania, USA},
 pages = {401--408},
 numpages = {8},
 nourl = {http://doi.acm.org/10.1145/2330784.2330846},
 doi = {10.1145/2330784.2330846},
 acmid = {2330846},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {genetic programming, lexicase selection, modal problems, modality, problem metrics, selection},
} 

@InProceedings{Helmuth:2014:GECCO,
  author =	"Thomas Helmuth and Lee Spector",
  title =	"Word count as a traditional programming benchmark
		 problem for genetic programming",
  booktitle =	"GECCO '14: Proceedings of the 2014 conference on
		 Genetic and evolutionary computation",
  year = 	"2014",
  NOeditor =	"Christian Igel and Dirk V. Arnold and Christian Gagne
		 and Elena Popovici and Anne Auger and Jaume Bacardit
		 and Dimo Brockhoff and Stefano Cagnoni and Kalyanmoy
		 Deb and Benjamin Doerr and James Foster and Tobias
		 Glasmachers and Emma Hart and Malcolm I. Heywood and
		 Hitoshi Iba and Christian Jacob and Thomas Jansen and
		 Yaochu Jin and Marouane Kessentini and Joshua D.
		 Knowles and William B. Langdon and Pedro Larranaga and
		 Sean Luke and Gabriel Luque and John A. W. McCall and
		 Marco A. {Montes de Oca} and Alison Motsinger-Reif and
		 Yew Soon Ong and Michael Palmer and Konstantinos E.
		 Parsopoulos and Guenther Raidl and Sebastian Risi and
		 Guenther Ruhe and Tom Schaul and Thomas Schmickl and
		 Bernhard Sendhoff and Kenneth O. Stanley and Thomas
		 Stuetzle and Dirk Thierens and Julian Togelius and
		 Carsten Witt and Christine Zarges",
  isbn13 =	"978-1-4503-2662-9",
  pages =	"919--926",
  keywords =	"genetic algorithms, genetic programming",
  month =	"12-16 " # jul,
  organisation = "SIGEVO",
  address =	"Vancouver, BC, Canada",
  noURL =  	"http://doi.acm.org/10.1145/2576768.2598230",
  doi =  	"doi:10.1145/2576768.2598230",
  publisher =	"ACM",
  publisher_address = "New York, NY, USA",
  abstract =	"The Unix utility program wc, which stands for word
		 count, takes any number of files and prints the number
		 of newlines, words, and characters in each of the
		 files. We show that genetic programming can find
		 programs that replicate the core functionality of the
		 wc utility, and propose this problem as a traditional
		 programming benchmark for genetic programming systems.
		 This wc problem features key elements of programming
		 tasks that often confront human programmers, including
		 requirements for multiple data types, a large
		 instruction set, control flow, and multiple outputs.
		 Furthermore, it mimics the behavior of a real-world
		 utility program, showing that genetic programming can
		 automatically synthesize programs with general utility.
		 We suggest statistical procedures that should be used
		 to compare performances of different systems on
		 traditional programming problems such as the wc
		 problem, and present the results of a short experiment
		 using the problem. Finally, we give a short analysis of
		 evolved solution programs, showing how they make use of
		 traditional programming concepts.",
  notes =	"Also known as \cite{2598230} GECCO-2014 A joint
		 meeting of the twenty third international conference on
		 genetic algorithms (ICGA-2014) and the nineteenth
		 annual genetic programming conference (GP-2014)",
  doi-url =	"http://dx.doi.org/10.1145/2576768.2598230",
}

@InProceedings{Helmuth:2013:GECCOcomp,
  author =	"Thomas Helmuth and Lee Spector",
  title =	"Evolving a digital multiplier with the {PushGP} genetic
		 programming system",
  booktitle =	"GECCO '13 Companion",
  year = 	"2013",
  NOeditor =	"Christian Blum and Enrique Alba and Thomas
		 Bartz-Beielstein and Daniele Loiacono and Francisco
		 Luna and Joern Mehnen and Gabriela Ochoa and Mike
		 Preuss and Emilia Tantar and Leonardo Vanneschi and
		 Kent McClymont and Ed Keedwell and Emma Hart and Kevin
		 Sim and Steven Gustafson and Ekaterina Vladislavleva
		 and Anne Auger and Bernd Bischl and Dimo Brockhoff and
		 Nikolaus Hansen and Olaf Mersmann and Petr Posik and
		 Heike Trautmann and Muhammad Iqbal and Kamran Shafi and
		 Ryan Urbanowicz and Stefan Wagner and Michael
		 Affenzeller and David Walker and Richard Everson and
		 Jonathan Fieldsend and Forrest Stonedahl and William
		 Rand and Stephen L. Smith and Stefano Cagnoni and
		 Robert M. Patton and Gisele L. Pappa and John Woodward
		 and Jerry Swan and Krzysztof Krawiec and
		 Alexandru-Adrian Tantar and Peter A. N. Bosman and
		 Miguel Vega-Rodriguez and Jose M. Chaves-Gonzalez and
		 David L. Gonzalez-Alvarez and Sergio Santander-Jimenez
		 and Lee Spector and Maarten Keijzer and Kenneth
		 Holladay and Tea Tusar and Boris Naujoks",
  isbn13 =	"978-1-4503-1964-5",
  keywords =	"genetic algorithms, genetic programming",
  pages =	"1627--1634",
  month =	"6-10 " # jul,
  organisation = "SIGEVO",
  address =	"Amsterdam, The Netherlands",
  doi =  	"doi:10.1145/2464576.2466814",
  publisher =	"ACM",
  publisher_address = "New York, NY, USA",
  abstract =	"A recent article on benchmark problems for genetic
		 programming suggested that researchers focus attention
		 on the digital multiplier problem, also known as the
		 multiple output multiplier problem, in part because it
		 is scalable and in part because the requirement of
		 multiple outputs presents challenges for some forms of
		 genetic programming [20]. Here we demonstrate the
		 application of stack-based genetic programming to the
		 digital multiplier problem using the PushGP genetic
		 programming system, which evolves programs expressed in
		 the stack-based Push programming language. We
		 demonstrate the use of output instructions and argue
		 that they provide a natural mechanism for producing
		 multiple outputs in a stack-based genetic programming
		 context. We also show how two recent developments in
		 PushGP dramatically improve the performance of the
		 system on the digital multiplier problem. These
		 developments are the ULTRA genetic operator, which
		 produces offspring via Uniform Linear Transformation
		 with Repair and Alternation [12], and lexicase
		 selection, which selects parents according to
		 performance on cases considered sequentially in random
		 order [11]. Our results using these techniques show not
		 only their utility, but also the utility of the digital
		 multiplier problem as a benchmark problem for genetic
		 programming research. The results also demonstrate the
		 exibility of stack-based genetic programming for
		 solving problems with multiple outputs and for serving
		 as a platform for experimentation with new genetic
		 programming techniques.",
  notes =	"Also known as \cite{2466814} Distributed at
		 GECCO-2013.",
  doi-url =	"http://dx.doi.org/10.1145/2464576.2466814",
}

% Experiment %

@InProceedings{McKay:2000:GECCO,
  author =	"R I McKay",
  title =	"Fitness Sharing in Genetic Programming",
  pages =	"435--442",
  year = 	"2000",
  publisher =	"Morgan Kaufmann",
  booktitle =	"Proceedings of the Genetic and Evolutionary
		 Computation Conference (GECCO-2000)",
  NOeditor =	"Darrell Whitley and David Goldberg and Erick Cantu-Paz
		 and Lee Spector and Ian Parmee and Hans-Georg Beyer",
  address =	"Las Vegas, Nevada, USA",
  publisher_address = "San Francisco, CA 94104, USA",
  month =	"10-12 " # jul,
  keywords =	"genetic algorithms, genetic programming",
  ISBN = 	"1-55860-708-0",
  noURL =  	"http://www.cs.bham.ac.uk/~wbl/biblio/gecco2000/GP256.pdf",
  noURL =  	"http://www.cs.bham.ac.uk/~wbl/biblio/gecco2000/GP256.ps",
  notes =	"A joint meeting of the ninth International Conference
		 on Genetic Algorithms (ICGA-2000) and the fifth Annual
		 Genetic Programming Conference (GP-2000) Part of
		 \cite{whitley:2000:GECCO}",
}

@InProceedings{Krawiec:2013:EvoIASP,
  author =	"Krzysztof Krawiec and Mateusz Nawrocki",
  title =	"Implicit Fitness Sharing for Evolutionary Synthesis of
		 License Plate Detectors",
  booktitle =	"Applications of Evolutionary Computing,
		 EvoApplications 2012",
  year = 	"2013",
  NOeditor =	"Anna I. Esparcia-Alcazar and Antonio Della Cioppa and
		 Ivanoe {De Falco} and Ernesto Tarantino and Carlos
		 Cotta and Robert Schaefer and Konrad Diwold and Kyrre
		 Glette and Andrea Tettamanzi and Alexandros Agapitos
		 and Paolo Burrelli and J. J. Merelo and Stefano Cagnoni
		 and Mengjie Zhang and Neil Urquhart and Kevin Sim and
		 Aniko Ekart and Francisco {Fernandez de Vega} and Sara
		 Silva and Evert Haasdijk and Gusz Eiben and Anabela
		 Simoes and Philipp Rohlfshagen",
  volume =	"7835",
  series =	"Lecture Notes in Computer Science",
  pages =	"376--386",
  address =	"Vienna, Austria",
  publisher_address = "Berlin",
  month =	"3-5 " # apr,
  organisation = "EvoStar",
  publisher =	"Springer",
  keywords =	"genetic algorithms, genetic programming, pattern
		 recognition, image analysis, implicit fitness sharing,
		 car number plate recognition",
  isbn13 =	"978-3-642-37191-2",
  doi =  	"doi:10.1007/978-3-642-37192-9_38",
  size = 	"11 pages",
  abstract =	"A genetic programming algorithm for synthesis of
		 object detection systems is proposed and applied to the
		 task of license plate recognition in uncontrolled
		 lighting conditions. The method evolves solutions
		 represented as data flows of high-level parametric
		 image operators. In an extended variant, the algorithm
		 employs implicit fitness sharing, which allows
		 identifying the particularly difficult training
		 examples and focusing the training process on them. The
		 experiment, involving heterogeneous video sequences
		 acquired in diverse conditions, demonstrates that
		 implicit fitness sharing substantially improves the
		 predictive performance of evolved detection systems,
		 providing maximum recognition accuracy achievable for
		 the considered setup and training data.",
  notes =	"http://www.kevinsim.co.uk/evostar2013/cfpEvoApplications.html
		 EvoApplications2013 held in conjunction with
		 EuroGP2013, EvoCOP2013, EvoBio'2013 and EvoMusArt2013",
  doi-url =	"http://dx.doi.org/10.1007/978-3-642-37192-9_38",
}

% R %

@Manual{R,
    title = {R: A Language and Environment for Statistical Computing},
    author = {{R Core Team}},
    organization = {R Foundation for Statistical Computing},
    address = {Vienna, Austria},
    year = {2012},
    note = {{ISBN} 3-900051-07-0},
    url = {http://www.R-project.org/},
}

@Manual{fmsb,
    title = {fmsb: Functions for medical statistics book with some demographic data},
    author = {Minato Nakazawa},
    year = {2014},
    note = {R package version 0.4.3},
    url = {http://CRAN.R-project.org/package=fmsb},
}
